{"ast":null,"code":"import { create } from \"zustand\";\nimport { persist, createJSONStorage } from \"zustand/middleware\";\n\n// define the store\nexport const userStore = create(persist(set => ({\n  username: \"\",\n  token: \"\",\n  photoURL: \"\",\n  email: \"\",\n  firstName: \"\",\n  lastName: \"\",\n  phone: \"\",\n  password: \"\",\n  users: null,\n  // Inicializa users como null\n  visible: false,\n  typeOfUser: \"\",\n  updateUsername: username => set({\n    username\n  }),\n  updateToken: token => set({\n    token\n  }),\n  updatePhotoURL: photoURL => set({\n    photoURL\n  }),\n  updateEmail: email => set({\n    email\n  }),\n  updateFirstName: firstName => set({\n    firstName\n  }),\n  updateLastName: lastName => set({\n    lastName\n  }),\n  updatePhone: phone => set({\n    phone\n  }),\n  updatePassword: password => set({\n    password\n  }),\n  updateUserTasks: userTasks => set({\n    userTasks\n  }),\n  updateVisible: visible => set({\n    visible\n  }),\n  updateTypeOfUser: typeOfUser => set({\n    typeOfUser\n  }),\n  updateUsers: users => set({\n    users\n  }),\n  // Adiciona a função updateUsers\n  deleteAllUserTasks: () => set({\n    userTasks: []\n  }),\n  fetchUsers: async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/project_backend/rest/users/all\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token: userStore.getState().token\n        }\n      });\n      if (response.ok) {\n        const users = await response.json();\n        console.log(\"Usuários recebidos:\", users);\n        set({\n          users\n        }); // Atualiza os usuários no estado\n      } else {\n        console.error(\"Failed to fetch users:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n    }\n  }\n}), {\n  name: \"mystore\",\n  storage: createJSONStorage(() => sessionStorage)\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","userStore","set","username","token","photoURL","email","firstName","lastName","phone","password","users","visible","typeOfUser","updateUsername","updateToken","updatePhotoURL","updateEmail","updateFirstName","updateLastName","updatePhone","updatePassword","updateUserTasks","userTasks","updateVisible","updateTypeOfUser","updateUsers","deleteAllUserTasks","fetchUsers","response","fetch","method","headers","getState","ok","json","console","log","error","statusText","name","storage","sessionStorage"],"sources":["D:/AoR/41.Projeto4/projecto4frontend/src/stores/UserStore.jsx"],"sourcesContent":["import { create } from \"zustand\";\r\nimport { persist, createJSONStorage } from \"zustand/middleware\";\r\n\r\n// define the store\r\nexport const userStore = create(\r\n    persist(\r\n        (set) => ({\r\n            username: \"\",\r\n            token: \"\",\r\n            photoURL: \"\",\r\n            email: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            phone: \"\",\r\n            password: \"\",\r\n            users: null, // Inicializa users como null\r\n            visible: false,\r\n            typeOfUser: \"\",\r\n            updateUsername: (username) => set({ username }),\r\n            updateToken: (token) => set({ token }),\r\n            updatePhotoURL: (photoURL) => set({ photoURL }),\r\n            updateEmail: (email) => set({ email }),\r\n            updateFirstName: (firstName) => set({ firstName }),\r\n            updateLastName: (lastName) => set({ lastName }),\r\n            updatePhone: (phone) => set({ phone }),\r\n            updatePassword: (password) => set({ password }),\r\n            updateUserTasks: (userTasks) => set({ userTasks }),\r\n            updateVisible: (visible) => set({ visible }),\r\n            updateTypeOfUser: (typeOfUser) => set({ typeOfUser }),\r\n            updateUsers: (users) => set({ users }), // Adiciona a função updateUsers\r\n            deleteAllUserTasks: () => set({ userTasks: [] }),\r\n\r\n            fetchUsers: async () => {\r\n                try {\r\n                    const response = await fetch(\"http://localhost:8080/project_backend/rest/users/all\", {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            token: userStore.getState().token,\r\n                        },\r\n                    });\r\n                    if (response.ok) {\r\n                        const users = await response.json();\r\n                        console.log(\"Usuários recebidos:\", users);\r\n                        set({ users }); // Atualiza os usuários no estado\r\n                    } else {\r\n                        console.error(\"Failed to fetch users:\", response.statusText);\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Error fetching users:\", error);\r\n                }\r\n            }\r\n        }),\r\n        {\r\n            name: \"mystore\",\r\n            storage: createJSONStorage(() => sessionStorage),\r\n        }\r\n    )\r\n);\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,EAAEC,iBAAiB,QAAQ,oBAAoB;;AAE/D;AACA,OAAO,MAAMC,SAAS,GAAGH,MAAM,CAC3BC,OAAO,CACFG,GAAG,KAAM;EACNC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,EAAE;EACbC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,IAAI;EAAE;EACbC,OAAO,EAAE,KAAK;EACdC,UAAU,EAAE,EAAE;EACdC,cAAc,EAAGX,QAAQ,IAAKD,GAAG,CAAC;IAAEC;EAAS,CAAC,CAAC;EAC/CY,WAAW,EAAGX,KAAK,IAAKF,GAAG,CAAC;IAAEE;EAAM,CAAC,CAAC;EACtCY,cAAc,EAAGX,QAAQ,IAAKH,GAAG,CAAC;IAAEG;EAAS,CAAC,CAAC;EAC/CY,WAAW,EAAGX,KAAK,IAAKJ,GAAG,CAAC;IAAEI;EAAM,CAAC,CAAC;EACtCY,eAAe,EAAGX,SAAS,IAAKL,GAAG,CAAC;IAAEK;EAAU,CAAC,CAAC;EAClDY,cAAc,EAAGX,QAAQ,IAAKN,GAAG,CAAC;IAAEM;EAAS,CAAC,CAAC;EAC/CY,WAAW,EAAGX,KAAK,IAAKP,GAAG,CAAC;IAAEO;EAAM,CAAC,CAAC;EACtCY,cAAc,EAAGX,QAAQ,IAAKR,GAAG,CAAC;IAAEQ;EAAS,CAAC,CAAC;EAC/CY,eAAe,EAAGC,SAAS,IAAKrB,GAAG,CAAC;IAAEqB;EAAU,CAAC,CAAC;EAClDC,aAAa,EAAGZ,OAAO,IAAKV,GAAG,CAAC;IAAEU;EAAQ,CAAC,CAAC;EAC5Ca,gBAAgB,EAAGZ,UAAU,IAAKX,GAAG,CAAC;IAAEW;EAAW,CAAC,CAAC;EACrDa,WAAW,EAAGf,KAAK,IAAKT,GAAG,CAAC;IAAES;EAAM,CAAC,CAAC;EAAE;EACxCgB,kBAAkB,EAAEA,CAAA,KAAMzB,GAAG,CAAC;IAAEqB,SAAS,EAAE;EAAG,CAAC,CAAC;EAEhDK,UAAU,EAAE,MAAAA,CAAA,KAAY;IACpB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sDAAsD,EAAE;QACjFC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC5B,KAAK,EAAEH,SAAS,CAACgC,QAAQ,CAAC,CAAC,CAAC7B;QAChC;MACJ,CAAC,CAAC;MACF,IAAIyB,QAAQ,CAACK,EAAE,EAAE;QACb,MAAMvB,KAAK,GAAG,MAAMkB,QAAQ,CAACM,IAAI,CAAC,CAAC;QACnCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE1B,KAAK,CAAC;QACzCT,GAAG,CAAC;UAAES;QAAM,CAAC,CAAC,CAAC,CAAC;MACpB,CAAC,MAAM;QACHyB,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAET,QAAQ,CAACU,UAAU,CAAC;MAChE;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IACjD;EACJ;AACJ,CAAC,CAAC,EACF;EACIE,IAAI,EAAE,SAAS;EACfC,OAAO,EAAEzC,iBAAiB,CAAC,MAAM0C,cAAc;AACnD,CACJ,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}