{"ast":null,"code":"import { create } from \"zustand\";\nimport { persist, createJSONStorage } from \"zustand/middleware\";\nimport { userStore } from \"./UserStore\";\n\n// Define a store\nexport const taskStore = create(persist(set => ({\n  id: null,\n  title: \"\",\n  description: \"\",\n  priority: \"\",\n  startDate: \"\",\n  limitDate: \"\",\n  stateId: \"\",\n  category: \"\",\n  erased: false,\n  updateId: id => set({\n    id\n  }),\n  updateTitle: title => set({\n    title\n  }),\n  updateDescription: description => set({\n    description\n  }),\n  updatePriority: priority => set({\n    priority\n  }),\n  updateStartDate: startDate => set({\n    startDate\n  }),\n  updateLimitDate: limitDate => set({\n    limitDate\n  }),\n  updateStatusId: stateId => set({\n    stateId\n  }),\n  updateCategory: category => set({\n    category\n  }),\n  updateErased: erased => set({\n    erased\n  }),\n  tasks: [],\n  setTasks: tasks => {\n    console.log(\"Tarefas armazenadas:\", tasks);\n    set({\n      tasks\n    });\n  },\n  fetchTasks: async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/project_backend/rest/users/tasks\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token: userStore.getState().token\n        }\n      });\n      if (response.ok) {\n        const tasks = await response.json();\n        console.log(\"Tarefas recebidas:\", tasks);\n        set({\n          tasks\n        });\n      } else {\n        console.error(\"Failed to fetch tasks:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  }\n}), {\n  name: \"taskStore\",\n  storage: createJSONStorage(() => sessionStorage)\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","userStore","taskStore","set","id","title","description","priority","startDate","limitDate","stateId","category","erased","updateId","updateTitle","updateDescription","updatePriority","updateStartDate","updateLimitDate","updateStatusId","updateCategory","updateErased","tasks","setTasks","console","log","fetchTasks","response","fetch","method","headers","token","getState","ok","json","error","statusText","name","storage","sessionStorage"],"sources":["D:/AoR/41.Projeto4/projecto4frontend/src/stores/TaskStore.jsx"],"sourcesContent":["import { create } from \"zustand\";\r\nimport { persist, createJSONStorage } from \"zustand/middleware\";\r\nimport { userStore } from \"./UserStore\";\r\n\r\n// Define a store\r\nexport const taskStore = create(\r\n    persist(\r\n        (set) => ({\r\n            id: null,\r\n            title: \"\",\r\n            description: \"\",\r\n            priority: \"\",\r\n            startDate: \"\",\r\n            limitDate: \"\",\r\n            stateId: \"\",\r\n            category: \"\",\r\n            erased: false,\r\n\r\n            updateId: (id) => set({ id }),\r\n            updateTitle: (title) => set({ title }),\r\n            updateDescription: (description) => set({ description }),\r\n            updatePriority: (priority) => set({ priority }),\r\n            updateStartDate: (startDate) => set({ startDate }),\r\n            updateLimitDate: (limitDate) => set({ limitDate }),\r\n            updateStatusId: (stateId) => set({ stateId }),\r\n            updateCategory: (category) => set({ category }),\r\n            updateErased: (erased) => set({ erased }),\r\n\r\n            \r\n            tasks: [],\r\n            setTasks: (tasks) => {\r\n                console.log(\"Tarefas armazenadas:\", tasks);\r\n                set({ tasks });\r\n            },\r\n            fetchTasks: async () => {\r\n                try {\r\n                    const response = await fetch(\"http://localhost:8080/project_backend/rest/users/tasks\", {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            token: userStore.getState().token,\r\n                        },\r\n                    });\r\n                    if (response.ok) {\r\n                        const tasks = await response.json();\r\n                        console.log(\"Tarefas recebidas:\", tasks);\r\n                        set({ tasks });\r\n                    } else {\r\n                        console.error(\"Failed to fetch tasks:\", response.statusText);\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Error fetching tasks:\", error);\r\n                }\r\n            }\r\n        }),\r\n        {\r\n            name: \"taskStore\",\r\n            storage: createJSONStorage(() => sessionStorage),\r\n        }\r\n    )\r\n);"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,EAAEC,iBAAiB,QAAQ,oBAAoB;AAC/D,SAASC,SAAS,QAAQ,aAAa;;AAEvC;AACA,OAAO,MAAMC,SAAS,GAAGJ,MAAM,CAC3BC,OAAO,CACFI,GAAG,KAAM;EACNC,EAAE,EAAE,IAAI;EACRC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE,EAAE;EACfC,QAAQ,EAAE,EAAE;EACZC,SAAS,EAAE,EAAE;EACbC,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE,EAAE;EACXC,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,KAAK;EAEbC,QAAQ,EAAGT,EAAE,IAAKD,GAAG,CAAC;IAAEC;EAAG,CAAC,CAAC;EAC7BU,WAAW,EAAGT,KAAK,IAAKF,GAAG,CAAC;IAAEE;EAAM,CAAC,CAAC;EACtCU,iBAAiB,EAAGT,WAAW,IAAKH,GAAG,CAAC;IAAEG;EAAY,CAAC,CAAC;EACxDU,cAAc,EAAGT,QAAQ,IAAKJ,GAAG,CAAC;IAAEI;EAAS,CAAC,CAAC;EAC/CU,eAAe,EAAGT,SAAS,IAAKL,GAAG,CAAC;IAAEK;EAAU,CAAC,CAAC;EAClDU,eAAe,EAAGT,SAAS,IAAKN,GAAG,CAAC;IAAEM;EAAU,CAAC,CAAC;EAClDU,cAAc,EAAGT,OAAO,IAAKP,GAAG,CAAC;IAAEO;EAAQ,CAAC,CAAC;EAC7CU,cAAc,EAAGT,QAAQ,IAAKR,GAAG,CAAC;IAAEQ;EAAS,CAAC,CAAC;EAC/CU,YAAY,EAAGT,MAAM,IAAKT,GAAG,CAAC;IAAES;EAAO,CAAC,CAAC;EAGzCU,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAGD,KAAK,IAAK;IACjBE,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,KAAK,CAAC;IAC1CnB,GAAG,CAAC;MAAEmB;IAAM,CAAC,CAAC;EAClB,CAAC;EACDI,UAAU,EAAE,MAAAA,CAAA,KAAY;IACpB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wDAAwD,EAAE;QACnFC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClCC,KAAK,EAAE9B,SAAS,CAAC+B,QAAQ,CAAC,CAAC,CAACD;QAChC;MACJ,CAAC,CAAC;MACF,IAAIJ,QAAQ,CAACM,EAAE,EAAE;QACb,MAAMX,KAAK,GAAG,MAAMK,QAAQ,CAACO,IAAI,CAAC,CAAC;QACnCV,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEH,KAAK,CAAC;QACxCnB,GAAG,CAAC;UAAEmB;QAAM,CAAC,CAAC;MAClB,CAAC,MAAM;QACHE,OAAO,CAACW,KAAK,CAAC,wBAAwB,EAAER,QAAQ,CAACS,UAAU,CAAC;MAChE;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZX,OAAO,CAACW,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IACjD;EACJ;AACJ,CAAC,CAAC,EACF;EACIE,IAAI,EAAE,WAAW;EACjBC,OAAO,EAAEtC,iBAAiB,CAAC,MAAMuC,cAAc;AACnD,CACJ,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}