{"ast":null,"code":"var _jsxFileName = \"D:\\\\AoR\\\\41.Projeto4\\\\projecto4frontend\\\\src\\\\pages\\\\Login.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { userStore } from \"../stores/UserStore.jsx\";\nimport { categoryStore } from \"../stores/CategoryStore.jsx\";\nimport { taskStore } from \"../stores/TaskStore.jsx\";\nimport \"../pages/Login.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  const [inputs, setInputs] = useState({});\n  const navigate = useNavigate();\n  const updateUserStore = userStore(state => state);\n  const updateCategoryStore = categoryStore(state => state);\n  const updateTaskStore = taskStore(state => state);\n  const handleChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    setInputs(values => ({\n      ...values,\n      [name]: value\n    }));\n  };\n  const [tasksFetched, setTasksFetched] = useState(false);\n  useEffect(() => {\n    const fetchTasksIfNeeded = async () => {\n      if (!tasksFetched) {\n        try {\n          await updateTaskStore.fetchTasks();\n          setTasksFetched(true);\n        } catch (error) {\n          console.error(\"Error fetching tasks:\", error);\n        }\n      }\n    };\n    fetchTasksIfNeeded();\n  }, [tasksFetched, updateTaskStore]);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const login = {\n      username: inputs.username,\n      password: inputs.password\n    };\n    try {\n      const response = await fetch(\"http://localhost:8080/project_backend/rest/users/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(login)\n      });\n      if (response.ok) {\n        const user = await response.json();\n        updateUserStore.updateUsername(user.username);\n        updateUserStore.updateToken(user.token);\n        updateUserStore.updatePhotoURL(user.photoURL);\n        updateUserStore.updateEmail(user.email);\n        updateUserStore.updateFirstName(user.firstName);\n        updateUserStore.updateLastName(user.lastName);\n        updateUserStore.updatePhone(user.phone);\n        updateUserStore.updatePassword(user.password);\n        updateUserStore.updateTypeOfUser(user.typeOfUser);\n        updateUserStore.updateUserTasks(user.userTasks);\n\n        // Atualize outros dados do usuário conforme necessário\n\n        // Fetch das categorias e armazenamento na store de categorias\n        try {\n          const responseCategories = await fetch(\"http://localhost:8080/project_backend/rest/users/categories\", {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              token: user.token // Adicione o token de autenticação\n            }\n          });\n          if (responseCategories.ok) {\n            const categories = await responseCategories.json();\n            console.log(\"Categorias:\", categories);\n            updateCategoryStore.setCategories(categories.map(category => category.name));\n          } else {\n            console.error(\"Failed to fetch categories:\", responseCategories.statusText);\n          }\n        } catch (error) {\n          console.error(\"Error fetching categories:\", error);\n        }\n\n        // Fetch de todas as tarefas e armazenamento na store de tarefas\n        try {\n          await updateTaskStore.fetchTasks(); // Chama a função fetchTasks da store de tarefas\n        } catch (error) {\n          console.error(\"Error fetching tasks:\", error);\n        }\n        console.log(\"Tasks:\", updateTaskStore.tasks);\n        console.log(\"Login feito com sucesso!\");\n        navigate('/home', {\n          replace: true\n        });\n      } else {\n        const responseBody = await response.json();\n        console.error(\"Erro no login:\", response.statusText, responseBody);\n        // Pode exibir uma mensagem de erro para o usuário\n      }\n    } catch (error) {\n      console.error(\"Erro no login:\", error);\n      // Pode exibir uma mensagem de erro para o usuário\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Login\",\n    id: \"login-outer-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-wrap\",\n      id: \"login-page-wrap\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loginpanel\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/multimedia/logo-scrum-01.png\",\n          id: \"logo-login\",\n          alt: \"Agile-Scrum-logo\",\n          width: \"250\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          id: \"login-form\",\n          className: \"input-login\",\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"username\",\n            name: \"username\",\n            placeholder: \"username\",\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            name: \"password\",\n            placeholder: \"password\",\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"loginButton\",\n            children: \"Sign in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/register\",\n            id: \"register-link\",\n            children: \"Sign up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}\n_s(Login, \"IY2MsWtePa/vplpIWP7kohRNd6Q=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","Link","useNavigate","userStore","categoryStore","taskStore","jsxDEV","_jsxDEV","Login","_s","inputs","setInputs","navigate","updateUserStore","state","updateCategoryStore","updateTaskStore","handleChange","event","name","target","value","values","tasksFetched","setTasksFetched","useEffect","fetchTasksIfNeeded","fetchTasks","error","console","handleSubmit","preventDefault","login","username","password","response","fetch","method","headers","body","JSON","stringify","ok","user","json","updateUsername","updateToken","token","updatePhotoURL","photoURL","updateEmail","email","updateFirstName","firstName","updateLastName","lastName","updatePhone","phone","updatePassword","updateTypeOfUser","typeOfUser","updateUserTasks","userTasks","responseCategories","categories","log","setCategories","map","category","statusText","tasks","replace","responseBody","className","id","children","src","alt","width","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","required","to","_c","$RefreshReg$"],"sources":["D:/AoR/41.Projeto4/projecto4frontend/src/pages/Login.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { userStore } from \"../stores/UserStore.jsx\";\r\nimport { categoryStore } from \"../stores/CategoryStore.jsx\";\r\nimport { taskStore } from \"../stores/TaskStore.jsx\";\r\nimport \"../pages/Login.css\";\r\n\r\nfunction Login() {\r\n    const [inputs, setInputs] = useState({});\r\n    const navigate = useNavigate();\r\n    const updateUserStore = userStore(state => state);\r\n    const updateCategoryStore = categoryStore(state => state);\r\n    const updateTaskStore = taskStore(state => state);\r\n\r\n    const handleChange = (event) => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n        setInputs(values => ({...values, [name]: value}));\r\n    }\r\n\r\n    const [tasksFetched, setTasksFetched] = useState(false);\r\n\r\nuseEffect(() => {\r\n    const fetchTasksIfNeeded = async () => {\r\n        if (!tasksFetched) {\r\n            try {\r\n                await updateTaskStore.fetchTasks();\r\n                setTasksFetched(true);\r\n            } catch (error) {\r\n                console.error(\"Error fetching tasks:\", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    fetchTasksIfNeeded();\r\n}, [tasksFetched, updateTaskStore]);\r\n\r\n    \r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const login = {\r\n            username: inputs.username,\r\n            password: inputs.password\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(\"http://localhost:8080/project_backend/rest/users/login\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(login),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const user = await response.json();\r\n                updateUserStore.updateUsername(user.username);\r\n                updateUserStore.updateToken(user.token);\r\n                updateUserStore.updatePhotoURL(user.photoURL);\r\n                updateUserStore.updateEmail(user.email);\r\n                updateUserStore.updateFirstName(user.firstName);\r\n                updateUserStore.updateLastName(user.lastName);\r\n                updateUserStore.updatePhone(user.phone);\r\n                updateUserStore.updatePassword(user.password);\r\n                updateUserStore.updateTypeOfUser(user.typeOfUser);\r\n                updateUserStore.updateUserTasks(user.userTasks);\r\n\r\n                // Atualize outros dados do usuário conforme necessário\r\n\r\n                // Fetch das categorias e armazenamento na store de categorias\r\n                try {\r\n                    const responseCategories = await fetch(\"http://localhost:8080/project_backend/rest/users/categories\", {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            token: user.token, // Adicione o token de autenticação\r\n                        },\r\n                    });\r\n\r\n                    if (responseCategories.ok) {\r\n                        const categories = await responseCategories.json();\r\n                        console.log(\"Categorias:\", categories);\r\n                        updateCategoryStore.setCategories(categories.map(category => category.name));\r\n                    } else {\r\n                        console.error(\"Failed to fetch categories:\", responseCategories.statusText);\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Error fetching categories:\", error);\r\n                }\r\n\r\n                // Fetch de todas as tarefas e armazenamento na store de tarefas\r\n                try {\r\n                    await updateTaskStore.fetchTasks(); // Chama a função fetchTasks da store de tarefas\r\n                } catch (error) {\r\n                    console.error(\"Error fetching tasks:\", error);\r\n                }\r\n                console.log(\"Tasks:\", updateTaskStore.tasks);\r\n\r\n                console.log(\"Login feito com sucesso!\");\r\n                navigate('/home', { replace: true });\r\n            } else {\r\n                const responseBody = await response.json();\r\n                console.error(\"Erro no login:\", response.statusText, responseBody);\r\n                // Pode exibir uma mensagem de erro para o usuário\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Erro no login:\", error);\r\n            // Pode exibir uma mensagem de erro para o usuário\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Login\" id=\"login-outer-container\">\r\n        <div className=\"page-wrap\" id=\"login-page-wrap\">\r\n           <div className=\"loginpanel\">\r\n                <img src=\"/multimedia/logo-scrum-01.png\" id=\"logo-login\" alt=\"Agile-Scrum-logo\" width=\"250\" />\r\n                <form id=\"login-form\" className=\"input-login\" onSubmit={handleSubmit}>\r\n                    <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"username\" onChange={handleChange} required />\r\n                    <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"password\" onChange={handleChange} required />\r\n                    <button id=\"loginButton\">Sign in</button>\r\n                </form>\r\n                <p>Don't have an account? <Link to=\"/register\" id=\"register-link\">Sign up</Link></p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}