{"ast":null,"code":"import { create } from \"zustand\";\nimport { persist, createJSONStorage } from \"zustand/middleware\";\n\n// Define a store\nexport const taskStore = create(persist(set => ({\n  title: \"\",\n  description: \"\",\n  priority: \"\",\n  startDate: \"\",\n  limitDate: \"\",\n  id: \"\",\n  stateId: \"\",\n  category: \"\",\n  erased: false,\n  owner: \"\",\n  updateTitle: title => set({\n    title\n  }),\n  updateDescription: description => set({\n    description\n  }),\n  updatePriority: priority => set({\n    priority\n  }),\n  updateStartDate: startDate => set({\n    startDate\n  }),\n  updateLimitDate: limitDate => set({\n    limitDate\n  }),\n  updateId: id => set({\n    id\n  }),\n  updateStateId: stateId => set({\n    stateId\n  }),\n  updateCategory: category => set({\n    category\n  }),\n  updateErased: erased => set({\n    erased\n  }),\n  tasks: [],\n  // Função para adicionar uma nova tarefa\n  addTask: task => set(state => ({\n    tasks: [...state.tasks, task]\n  })),\n  // Função para editar uma tarefa existente\n  editTask: (oldTask, updatedTask) => set(state => ({\n    tasks: state.tasks.map(task => task.name === oldTask ? {\n      ...task,\n      ...updatedTask\n    } : task)\n  })),\n  // Função para excluir uma tarefa\n  deleteTask: deleteTask => set(state => ({\n    tasks: state.tasks.filter(task => task.name !== deleteTask)\n  }))\n}), {\n  name: \"taskStore\",\n  storage: createJSONStorage(() => sessionStorage)\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","taskStore","set","title","description","priority","startDate","limitDate","id","stateId","category","erased","owner","updateTitle","updateDescription","updatePriority","updateStartDate","updateLimitDate","updateId","updateStateId","updateCategory","updateErased","tasks","addTask","task","state","editTask","oldTask","updatedTask","map","name","deleteTask","filter","storage","sessionStorage"],"sources":["D:/AoR/41.Projeto4/projecto4frontend/src/stores/TaskStore.jsx"],"sourcesContent":["import { create } from \"zustand\";\r\nimport { persist, createJSONStorage } from \"zustand/middleware\";\r\n\r\n// Define a store\r\nexport const taskStore = create(\r\n    persist(\r\n        (set) => ({\r\n            title: \"\",\r\n            description: \"\",\r\n            priority: \"\",\r\n            startDate: \"\",\r\n            limitDate: \"\",\r\n\r\n            id: \"\",\r\n            stateId: \"\",\r\n            category: \"\",\r\n            erased: false,\r\n            owner: \"\",\r\n\r\n            updateTitle: (title) => set({ title }),\r\n            updateDescription: (description) => set({ description }),\r\n            updatePriority: (priority) => set({ priority }),\r\n            updateStartDate: (startDate) => set({ startDate }),\r\n            updateLimitDate: (limitDate) => set({ limitDate }),\r\n\r\n            updateId: (id) => set({ id }),\r\n            updateStateId: (stateId) => set({ stateId }),\r\n            updateCategory: (category) => set({ category }),\r\n            updateErased: (erased) => set({ erased }),\r\n            \r\n            \r\n\r\n\r\n\r\n            tasks: [],\r\n            // Função para adicionar uma nova tarefa\r\n            addTask: (task) =>\r\n                set((state) => ({\r\n                    tasks: [...state.tasks, task],\r\n                })),\r\n            // Função para editar uma tarefa existente\r\n            editTask: (oldTask, updatedTask) =>\r\n                set((state) => ({\r\n                    tasks: state.tasks.map((task) =>\r\n                        task.name === oldTask ? { ...task, ...updatedTask } : task\r\n                    ),\r\n                })),\r\n            // Função para excluir uma tarefa\r\n            deleteTask: (deleteTask) =>\r\n                set((state) => ({\r\n                    tasks: state.tasks.filter((task) => task.name !== deleteTask),\r\n                })),\r\n        }),\r\n        {\r\n            name: \"taskStore\",\r\n            storage: createJSONStorage(() => sessionStorage),\r\n        }\r\n    )\r\n);"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,EAAEC,iBAAiB,QAAQ,oBAAoB;;AAE/D;AACA,OAAO,MAAMC,SAAS,GAAGH,MAAM,CAC3BC,OAAO,CACFG,GAAG,KAAM;EACNC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE,EAAE;EACfC,QAAQ,EAAE,EAAE;EACZC,SAAS,EAAE,EAAE;EACbC,SAAS,EAAE,EAAE;EAEbC,EAAE,EAAE,EAAE;EACNC,OAAO,EAAE,EAAE;EACXC,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,KAAK;EACbC,KAAK,EAAE,EAAE;EAETC,WAAW,EAAGV,KAAK,IAAKD,GAAG,CAAC;IAAEC;EAAM,CAAC,CAAC;EACtCW,iBAAiB,EAAGV,WAAW,IAAKF,GAAG,CAAC;IAAEE;EAAY,CAAC,CAAC;EACxDW,cAAc,EAAGV,QAAQ,IAAKH,GAAG,CAAC;IAAEG;EAAS,CAAC,CAAC;EAC/CW,eAAe,EAAGV,SAAS,IAAKJ,GAAG,CAAC;IAAEI;EAAU,CAAC,CAAC;EAClDW,eAAe,EAAGV,SAAS,IAAKL,GAAG,CAAC;IAAEK;EAAU,CAAC,CAAC;EAElDW,QAAQ,EAAGV,EAAE,IAAKN,GAAG,CAAC;IAAEM;EAAG,CAAC,CAAC;EAC7BW,aAAa,EAAGV,OAAO,IAAKP,GAAG,CAAC;IAAEO;EAAQ,CAAC,CAAC;EAC5CW,cAAc,EAAGV,QAAQ,IAAKR,GAAG,CAAC;IAAEQ;EAAS,CAAC,CAAC;EAC/CW,YAAY,EAAGV,MAAM,IAAKT,GAAG,CAAC;IAAES;EAAO,CAAC,CAAC;EAMzCW,KAAK,EAAE,EAAE;EACT;EACAC,OAAO,EAAGC,IAAI,IACVtB,GAAG,CAAEuB,KAAK,KAAM;IACZH,KAAK,EAAE,CAAC,GAAGG,KAAK,CAACH,KAAK,EAAEE,IAAI;EAChC,CAAC,CAAC,CAAC;EACP;EACAE,QAAQ,EAAEA,CAACC,OAAO,EAAEC,WAAW,KAC3B1B,GAAG,CAAEuB,KAAK,KAAM;IACZH,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACO,GAAG,CAAEL,IAAI,IACxBA,IAAI,CAACM,IAAI,KAAKH,OAAO,GAAG;MAAE,GAAGH,IAAI;MAAE,GAAGI;IAAY,CAAC,GAAGJ,IAC1D;EACJ,CAAC,CAAC,CAAC;EACP;EACAO,UAAU,EAAGA,UAAU,IACnB7B,GAAG,CAAEuB,KAAK,KAAM;IACZH,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACU,MAAM,CAAER,IAAI,IAAKA,IAAI,CAACM,IAAI,KAAKC,UAAU;EAChE,CAAC,CAAC;AACV,CAAC,CAAC,EACF;EACID,IAAI,EAAE,WAAW;EACjBG,OAAO,EAAEjC,iBAAiB,CAAC,MAAMkC,cAAc;AACnD,CACJ,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}