{"ast":null,"code":"import { create } from \"zustand\";\nimport { persist, createJSONStorage } from \"zustand/middleware\";\nimport { userStore } from \"./UserStore\";\n\n// Define a store\nexport const taskStore = create(persist(set => ({\n  title: \"\",\n  description: \"\",\n  priority: \"\",\n  startDate: \"\",\n  limitDate: \"\",\n  stateId: \"\",\n  category: \"\",\n  erased: false,\n  updateTitle: title => set({\n    title\n  }),\n  updateDescription: description => set({\n    description\n  }),\n  updatePriority: priority => set({\n    priority\n  }),\n  updateStartDate: startDate => set({\n    startDate\n  }),\n  updateLimitDate: limitDate => set({\n    limitDate\n  }),\n  updateStatusId: stateId => set({\n    stateId\n  }),\n  updateCategory: category => set({\n    category\n  }),\n  updateErased: erased => set({\n    erased\n  }),\n  tasks: [],\n  addTask: task => set(state => ({\n    tasks: [...state.tasks, task]\n  })),\n  editTask: (oldTask, updatedTask) => set(state => ({\n    tasks: state.tasks.map(task => task.id === oldTask.id ? {\n      ...task,\n      ...updatedTask\n    } : task)\n  })),\n  deleteTask: deleteTask => set(state => ({\n    tasks: state.tasks.filter(task => task.id !== deleteTask.id)\n  })),\n  fetchTasks: async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/project_backend/rest/users/tasks\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token: userStore.getState().token\n        }\n      });\n      if (response.ok) {\n        const tasks = await response.json();\n        set({\n          tasks\n        });\n      } else {\n        console.error(\"Failed to fetch tasks:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  }\n}), {\n  name: \"taskStore\",\n  storage: createJSONStorage(() => sessionStorage)\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","userStore","taskStore","set","title","description","priority","startDate","limitDate","stateId","category","erased","updateTitle","updateDescription","updatePriority","updateStartDate","updateLimitDate","updateStatusId","updateCategory","updateErased","tasks","addTask","task","state","editTask","oldTask","updatedTask","map","id","deleteTask","filter","fetchTasks","response","fetch","method","headers","token","getState","ok","json","console","error","statusText","name","storage","sessionStorage"],"sources":["D:/AoR/41.Projeto4/projecto4frontend/src/stores/TaskStore.jsx"],"sourcesContent":["import { create } from \"zustand\";\r\nimport { persist, createJSONStorage } from \"zustand/middleware\";\r\nimport { userStore } from \"./UserStore\";\r\n\r\n// Define a store\r\nexport const taskStore = create(\r\n    persist(\r\n        (set) => ({\r\n            title: \"\",\r\n            description: \"\",\r\n            priority: \"\",\r\n            startDate: \"\",\r\n            limitDate: \"\",\r\n            stateId: \"\",\r\n            category: \"\",\r\n            erased: false,\r\n\r\n            updateTitle: (title) => set({ title }),\r\n            updateDescription: (description) => set({ description }),\r\n            updatePriority: (priority) => set({ priority }),\r\n            updateStartDate: (startDate) => set({ startDate }),\r\n            updateLimitDate: (limitDate) => set({ limitDate }),\r\n            updateStatusId: (stateId) => set({ stateId }),\r\n            updateCategory: (category) => set({ category }),\r\n            updateErased: (erased) => set({ erased }),\r\n\r\n            \r\n            tasks: [],\r\n            \r\n            addTask: (task) =>\r\n                set((state) => ({\r\n                    tasks: [...state.tasks, task],\r\n                })),\r\n\r\n            editTask: (oldTask, updatedTask) =>\r\n                set((state) => ({\r\n                    tasks: state.tasks.map((task) =>\r\n                        task.id === oldTask.id ? { ...task, ...updatedTask } : task\r\n                    ),\r\n                })),\r\n\r\n            deleteTask: (deleteTask) =>\r\n                set((state) => ({\r\n                    tasks: state.tasks.filter((task) => task.id !== deleteTask.id),\r\n                })),\r\n            fetchTasks: async () => {\r\n                try {\r\n                    const response = await fetch(\"http://localhost:8080/project_backend/rest/users/tasks\", {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            token: userStore.getState().token,\r\n                        },\r\n                    });\r\n                    if (response.ok) {\r\n                        const tasks = await response.json();\r\n                        set({ tasks });\r\n                    } else {\r\n                        console.error(\"Failed to fetch tasks:\", response.statusText);\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Error fetching tasks:\", error);\r\n                }\r\n            }\r\n        }),\r\n        {\r\n            name: \"taskStore\",\r\n            storage: createJSONStorage(() => sessionStorage),\r\n        }\r\n    )\r\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}