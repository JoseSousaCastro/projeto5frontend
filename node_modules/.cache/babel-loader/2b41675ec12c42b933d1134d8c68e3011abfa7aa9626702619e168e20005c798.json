{"ast":null,"code":"import { create } from \"zustand\";\nimport { persist, createJSONStorage } from \"zustand/middleware\";\n\n// Define a store\nexport const categoryStore = create(persist(set => ({\n  categories: [],\n  setCategories: categories => {\n    set({\n      categories\n    });\n  },\n  // Função para adicionar uma nova categoria\n  addCategory: category => {\n    console.log(\"Adicionando categoria:\", category);\n    set(state => ({\n      categories: [...state.categories, category]\n    }));\n  },\n  // Função para editar uma categoria existente\n  editCategory: (oldCategory, updatedCategory) => {\n    console.log(\"Editando categoria:\", oldCategory, updatedCategory);\n    set(state => ({\n      categories: state.categories.map(category => category === oldCategory ? updatedCategory : category)\n    }));\n  },\n  // Função para excluir uma categoria\n  deleteCategory: deleteCategory => {\n    console.log(\"Excluindo categoria:\", deleteCategory);\n    set(state => ({\n      categories: state.categories.filter(category => category !== deleteCategory)\n    }));\n  }\n  /*             fetchCategories: async () => {\r\n                  try {\r\n                      const response = await fetch(\"http://localhost:8080/project_backend/rest/users/categories\", {\r\n                          method: \"GET\",\r\n                          headers: {\r\n                              \"Content-Type\": \"application/json\",\r\n                          },\r\n                      });\r\n                      if (response.ok) {\r\n                          const categories = await response.json();\r\n                          set({ categories: categories.map(category => category.name) });\r\n                      } else {\r\n                          console.error(\"Failed to fetch categories:\", response.statusText);\r\n                      }\r\n                  } catch (error) {\r\n                      console.error(\"Error fetching categories:\", error);\r\n                  }\r\n              }, */\n}), {\n  name: \"categoryStore\",\n  storage: createJSONStorage(() => sessionStorage)\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","categoryStore","set","categories","setCategories","addCategory","category","console","log","state","editCategory","oldCategory","updatedCategory","map","deleteCategory","filter","name","storage","sessionStorage"],"sources":["D:/AoR/41.Projeto4/projecto4frontend/src/stores/CategoryStore.jsx"],"sourcesContent":["import { create } from \"zustand\";\r\nimport { persist, createJSONStorage } from \"zustand/middleware\";\r\n\r\n// Define a store\r\nexport const categoryStore = create(\r\n    persist(\r\n        (set) => ({\r\n            categories: [],\r\n            setCategories: (categories) => {\r\n                set({ categories });\r\n            },\r\n            // Função para adicionar uma nova categoria\r\n            addCategory: (category) => {\r\n                console.log(\"Adicionando categoria:\", category);\r\n                set((state) => ({\r\n                    categories: [...state.categories, category],\r\n                }));\r\n            },\r\n            // Função para editar uma categoria existente\r\n            editCategory: (oldCategory, updatedCategory) => {\r\n                console.log(\"Editando categoria:\", oldCategory, updatedCategory);\r\n                set((state) => ({\r\n                    categories: state.categories.map((category) =>\r\n                        category === oldCategory ? updatedCategory : category\r\n                    ),\r\n                }));\r\n            },\r\n            // Função para excluir uma categoria\r\n            deleteCategory: (deleteCategory) => {\r\n                console.log(\"Excluindo categoria:\", deleteCategory);\r\n                set((state) => ({\r\n                    categories: state.categories.filter((category) => category !== deleteCategory),\r\n                }));\r\n            },\r\n/*             fetchCategories: async () => {\r\n                try {\r\n                    const response = await fetch(\"http://localhost:8080/project_backend/rest/users/categories\", {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                        },\r\n                    });\r\n                    if (response.ok) {\r\n                        const categories = await response.json();\r\n                        set({ categories: categories.map(category => category.name) });\r\n                    } else {\r\n                        console.error(\"Failed to fetch categories:\", response.statusText);\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Error fetching categories:\", error);\r\n                }\r\n            }, */\r\n        }),\r\n        {\r\n            name: \"categoryStore\",\r\n            storage: createJSONStorage(() => sessionStorage),\r\n        }\r\n    )\r\n);\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,EAAEC,iBAAiB,QAAQ,oBAAoB;;AAE/D;AACA,OAAO,MAAMC,aAAa,GAAGH,MAAM,CAC/BC,OAAO,CACFG,GAAG,KAAM;EACNC,UAAU,EAAE,EAAE;EACdC,aAAa,EAAGD,UAAU,IAAK;IAC3BD,GAAG,CAAC;MAAEC;IAAW,CAAC,CAAC;EACvB,CAAC;EACD;EACAE,WAAW,EAAGC,QAAQ,IAAK;IACvBC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,QAAQ,CAAC;IAC/CJ,GAAG,CAAEO,KAAK,KAAM;MACZN,UAAU,EAAE,CAAC,GAAGM,KAAK,CAACN,UAAU,EAAEG,QAAQ;IAC9C,CAAC,CAAC,CAAC;EACP,CAAC;EACD;EACAI,YAAY,EAAEA,CAACC,WAAW,EAAEC,eAAe,KAAK;IAC5CL,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEG,WAAW,EAAEC,eAAe,CAAC;IAChEV,GAAG,CAAEO,KAAK,KAAM;MACZN,UAAU,EAAEM,KAAK,CAACN,UAAU,CAACU,GAAG,CAAEP,QAAQ,IACtCA,QAAQ,KAAKK,WAAW,GAAGC,eAAe,GAAGN,QACjD;IACJ,CAAC,CAAC,CAAC;EACP,CAAC;EACD;EACAQ,cAAc,EAAGA,cAAc,IAAK;IAChCP,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEM,cAAc,CAAC;IACnDZ,GAAG,CAAEO,KAAK,KAAM;MACZN,UAAU,EAAEM,KAAK,CAACN,UAAU,CAACY,MAAM,CAAET,QAAQ,IAAKA,QAAQ,KAAKQ,cAAc;IACjF,CAAC,CAAC,CAAC;EACP;EACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,CAAC,CAAC,EACF;EACIE,IAAI,EAAE,eAAe;EACrBC,OAAO,EAAEjB,iBAAiB,CAAC,MAAMkB,cAAc;AACnD,CACJ,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}