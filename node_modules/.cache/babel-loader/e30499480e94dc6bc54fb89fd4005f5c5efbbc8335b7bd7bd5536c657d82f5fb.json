{"ast":null,"code":"import { create } from \"zustand\";\nimport { persist, createJSONStorage } from \"zustand/middleware\";\n\n// define the store\nexport const userStore = create(persist(set => ({\n  username: \"\",\n  token: \"\",\n  photoURL: \"\",\n  typeOfUser: \"\",\n  email: \"\",\n  firstName: \"\",\n  lastName: \"\",\n  phone: \"\",\n  password: \"\",\n  userTasks: [],\n  visible: false,\n  typeOfUser: \"\",\n  updateUsername: username => set({\n    username\n  }),\n  updateToken: token => set({\n    token\n  }),\n  updatePhotoURL: photoURL => set({\n    photoURL\n  }),\n  updateTypeOfUser: typeOfUser => set({\n    typeOfUser\n  }),\n  updateEmail: email => set({\n    email\n  }),\n  updateFirstName: firstName => set({\n    firstName\n  }),\n  updateLastName: lastName => set({\n    lastName\n  }),\n  updatePhone: phone => set({\n    phone\n  }),\n  updatePassword: password => set({\n    password\n  }),\n  updateUserTasks: userTasks => set({\n    userTasks\n  }),\n  updateVisible: visible => set({\n    visible\n  }),\n  updateTypeOfUser: typeOfUser => set({\n    typeOfUser\n  }),\n  deleteAllUserTasks: () => set({\n    userTasks: []\n  }),\n  fetchUsers: async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/project_backend/rest/users\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token: userStore.getState().token\n        }\n      });\n      if (response.ok) {\n        const users = await response.json();\n        console.log(\"Usuários recebidos:\", users);\n        set({\n          users\n        });\n      } else {\n        console.error(\"Failed to fetch users:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n    }\n  }\n}), {\n  name: \"mystore\",\n  storage: createJSONStorage(() => sessionStorage)\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","userStore","set","username","token","photoURL","typeOfUser","email","firstName","lastName","phone","password","userTasks","visible","updateUsername","updateToken","updatePhotoURL","updateTypeOfUser","updateEmail","updateFirstName","updateLastName","updatePhone","updatePassword","updateUserTasks","updateVisible","deleteAllUserTasks","fetchUsers","response","fetch","method","headers","getState","ok","users","json","console","log","error","statusText","name","storage","sessionStorage"],"sources":["D:/AoR/41.Projeto4/projecto4frontend/src/stores/UserStore.jsx"],"sourcesContent":["import { create } from \"zustand\";\r\nimport { persist, createJSONStorage } from \"zustand/middleware\";\r\n\r\n// define the store\r\nexport const userStore = create(\r\n    persist(\r\n        (set) => ({\r\n        username: \"\",\r\n        token: \"\",\r\n        photoURL: \"\",\r\n        typeOfUser: \"\",\r\n\r\n        email: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        phone: \"\",\r\n        password: \"\",\r\n        userTasks: [],\r\n        visible: false,\r\n        typeOfUser: \"\",\r\n        updateUsername: (username) => set({ username }),\r\n        updateToken: (token) => set({ token }),\r\n        updatePhotoURL: (photoURL) => set({ photoURL }),\r\n        updateTypeOfUser: (typeOfUser) => set({ typeOfUser }),\r\n\r\n        updateEmail: (email) => set({ email }),\r\n        updateFirstName: (firstName) => set({ firstName }),\r\n        updateLastName: (lastName) => set({ lastName }),\r\n        updatePhone: (phone) => set({ phone }),\r\n        updatePassword: (password) => set({ password }),\r\n        updateUserTasks: (userTasks) => set({ userTasks }),\r\n        updateVisible: (visible) => set({ visible }),\r\n        updateTypeOfUser: (typeOfUser) => set({ typeOfUser }),\r\n\r\n        deleteAllUserTasks: () => set({ userTasks: [] }),\r\n\r\n        fetchUsers: async () => {\r\n            try {\r\n                const response = await fetch(\"http://localhost:8080/project_backend/rest/users\", {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        token: userStore.getState().token,\r\n                    },\r\n                });\r\n                if (response.ok) {\r\n                    const users = await response.json();\r\n                    console.log(\"Usuários recebidos:\", users);\r\n                    set({ users });\r\n                } else {\r\n                    console.error(\"Failed to fetch users:\", response.statusText);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching users:\", error);\r\n            }\r\n        }\r\n        }),\r\n        {\r\n            name: \"mystore\",\r\n            storage: createJSONStorage(() => sessionStorage),\r\n        }\r\n    )\r\n);"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,EAAEC,iBAAiB,QAAQ,oBAAoB;;AAE/D;AACA,OAAO,MAAMC,SAAS,GAAGH,MAAM,CAC3BC,OAAO,CACFG,GAAG,KAAM;EACVC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,EAAE;EACZC,UAAU,EAAE,EAAE;EAEdC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,EAAE;EACbC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,EAAE;EACZC,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE,KAAK;EACdP,UAAU,EAAE,EAAE;EACdQ,cAAc,EAAGX,QAAQ,IAAKD,GAAG,CAAC;IAAEC;EAAS,CAAC,CAAC;EAC/CY,WAAW,EAAGX,KAAK,IAAKF,GAAG,CAAC;IAAEE;EAAM,CAAC,CAAC;EACtCY,cAAc,EAAGX,QAAQ,IAAKH,GAAG,CAAC;IAAEG;EAAS,CAAC,CAAC;EAC/CY,gBAAgB,EAAGX,UAAU,IAAKJ,GAAG,CAAC;IAAEI;EAAW,CAAC,CAAC;EAErDY,WAAW,EAAGX,KAAK,IAAKL,GAAG,CAAC;IAAEK;EAAM,CAAC,CAAC;EACtCY,eAAe,EAAGX,SAAS,IAAKN,GAAG,CAAC;IAAEM;EAAU,CAAC,CAAC;EAClDY,cAAc,EAAGX,QAAQ,IAAKP,GAAG,CAAC;IAAEO;EAAS,CAAC,CAAC;EAC/CY,WAAW,EAAGX,KAAK,IAAKR,GAAG,CAAC;IAAEQ;EAAM,CAAC,CAAC;EACtCY,cAAc,EAAGX,QAAQ,IAAKT,GAAG,CAAC;IAAES;EAAS,CAAC,CAAC;EAC/CY,eAAe,EAAGX,SAAS,IAAKV,GAAG,CAAC;IAAEU;EAAU,CAAC,CAAC;EAClDY,aAAa,EAAGX,OAAO,IAAKX,GAAG,CAAC;IAAEW;EAAQ,CAAC,CAAC;EAC5CI,gBAAgB,EAAGX,UAAU,IAAKJ,GAAG,CAAC;IAAEI;EAAW,CAAC,CAAC;EAErDmB,kBAAkB,EAAEA,CAAA,KAAMvB,GAAG,CAAC;IAAEU,SAAS,EAAE;EAAG,CAAC,CAAC;EAEhDc,UAAU,EAAE,MAAAA,CAAA,KAAY;IACpB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kDAAkD,EAAE;QAC7EC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC1B,KAAK,EAAEH,SAAS,CAAC8B,QAAQ,CAAC,CAAC,CAAC3B;QAChC;MACJ,CAAC,CAAC;MACF,IAAIuB,QAAQ,CAACK,EAAE,EAAE;QACb,MAAMC,KAAK,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QACnCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,KAAK,CAAC;QACzC/B,GAAG,CAAC;UAAE+B;QAAM,CAAC,CAAC;MAClB,CAAC,MAAM;QACHE,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEV,QAAQ,CAACW,UAAU,CAAC;MAChE;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IACjD;EACJ;AACA,CAAC,CAAC,EACF;EACIE,IAAI,EAAE,SAAS;EACfC,OAAO,EAAExC,iBAAiB,CAAC,MAAMyC,cAAc;AACnD,CACJ,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}